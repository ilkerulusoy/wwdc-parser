name: Release

on:
  push:
    tags:
      - 'RELEASE*'

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: read
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Get previous tag
        id: previoustag
        run: |
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          echo "tag=$PREVIOUS_TAG" >> $GITHUB_OUTPUT
      
      - name: Generate Release Notes
        id: release_notes
        run: |
          echo "### Release Notes" > RELEASE_NOTES.md
          if [ -n "${{ steps.previoustag.outputs.tag }}" ]; then
            {
              echo "### Changes since ${{ steps.previoustag.outputs.tag }}" >> RELEASE_NOTES.md
              git log ${{ steps.previoustag.outputs.tag }}..HEAD --pretty=format:"* %s (%h)" --reverse | grep -i "^* Merge pull request" >> RELEASE_NOTES.md
            } || {
              echo "No changes to document" >> RELEASE_NOTES.md
            }
          else
            {
              echo "### Initial Release" >> RELEASE_NOTES.md
              git log --pretty=format:"* %s (%h)" --reverse | grep -i "^* Merge pull request" >> RELEASE_NOTES.md
            } || {
              echo "Initial release - no changes to document" >> RELEASE_NOTES.md
            }
          fi
      
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: false

  build-and-upload:
    name: Build and Upload
    needs: create-release
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: wwdc-parser
            asset_name: wwdc-parser-linux-amd64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: wwdc-parser
            asset_name: wwdc-parser-linux-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: wwdc-parser.exe
            asset_name: wwdc-parser-windows-amd64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: wwdc-parser
            asset_name: wwdc-parser-macos-amd64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: wwdc-parser
            asset_name: wwdc-parser-macos-arm64
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev

      - name: Install cross-compilation dependencies
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
          sudo apt-get install -y libssl-dev:arm64
          echo "OPENSSL_DIR=/usr/aarch64-linux-gnu" >> $GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=/usr/include/aarch64-linux-gnu" >> $GITHUB_ENV

      - name: Install macOS dependencies
        if: runner.os == 'macOS'
        run: |
          brew install openssl@3
          echo "OPENSSL_DIR=$(brew --prefix openssl@3)" >> $GITHUB_ENV

      - name: Install Windows dependencies
        if: runner.os == 'Windows'
        run: |
          vcpkg integrate install
          vcpkg install openssl:x64-windows-static
          echo "OPENSSL_DIR=C:/vcpkg/installed/x64-windows-static" >> $env:GITHUB_ENV
          echo "OPENSSL_STATIC=1" >> $env:GITHUB_ENV

      - name: Build binary
        run: |
          cargo build --release --target ${{ matrix.target }}
          
      - name: Rename binary
        shell: bash
        run: |
          cd target/${{ matrix.target }}/release
          mv ${{ matrix.artifact_name }} ${{ matrix.asset_name }}
          
      - name: Upload binary to release
        uses: softprops/action-gh-release@v1
        with:
          files: target/${{ matrix.target }}/release/${{ matrix.asset_name }}
          
  publish-crate:
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: Install OpenSSL
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev

      - name: Cache Dependencies
        uses: Swatinem/rust-cache@v2
      
      - name: Publish to crates.io
        run: cargo publish
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}